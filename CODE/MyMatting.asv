function Matting(StableVid, ExtractedVid, backgroundImage, Output, WidthOfNarrowBand)
% Functionality:
%   The function mats the object and the supplied background.
% Arguments:
%   Input                   -   The video after stabilization.
%   InputBinary             -   Binary video after background subtraction.
%   InputBackground         -   New background for the video. 
%   Output                  -   Output file name (the matted video).
%   WidthOfNarrowBand       -   Width for the narrow band.  
% Output:
%   The video after matting (combining the object and the new background) named 'matted.avi'.
%   
backgroundImage = 'background.jpg';
StableVid = 'stabilized.avi';
ExtractedVid = 'binary.avi';
Output = 'matted.avi';
WidthOfNarrowBand = 3;
factor = 1; %addtional factor for background vs foreground
SElement = strel('disk', WidthOfNarrowBand);

% Creating I/O objects & Initializing parameters:
InputBackground = sprintf( '../Input/%s', backgroundImage);
InputFile = sprintf('../Output/%s', StableVid);
InputBinaryFile = sprintf('../Output/%s', ExtractedVid);


hVideoStable = VideoReader(InputFile);
hVideoExtracted = VideoReader(InputBinaryFile);

ApproxNumberOfFrames = (hVideoStable.Duration*hVideoStable.FrameRate-1);


[dataBaseStable,NumberOfFramesStable] = LoadDB(hVideoStable,ApproxNumberOfFrames);
[dataBaseExtracted,NumberOfFramesExtracted] = LoadDB(hVideoExtracted,ApproxNumberOfFrames);

NumberOfFrames = min(NumberOfFramesStable, NumberOfFramesExtracted);
[Height,Width,~]= size(dataBaseStable{1});


% Resizing background due to the video size:
BackgroundImage = imread(InputBackground);
BackgroundImage = im2double(imresize(BackgroundImage, [Height Width]));

% opening output video
hVideoOut = VideoWriter(sprintf( '../Output/%s', Output));
hVideoOut.Quality = 100;
hVideoOut.FrameRate = hVideoStable.FrameRate;
open(hVideoOut);


% starting algorithm




h = waitbar(0, 'Matting, Please Wait...');
for FrameNumber=1:NumberOfFrames
    waitbar(FrameCount/NumberOfFrames, h);
    % Getting a new frame:
    CurrFrameRGB = (dataBaseStable{FrameNumber});
    CurrFrameGray = uint8(rgb2gray(CurrFrameRGB));
    CurrFrameRGB = im2double(CurrFrameRGB);
	CurrBinaryFrame = imbinarize(rgb2gray(dataBaseExtracted{FrameNumber}));
	BinImage = imfill(CurrBinaryFrame,'holes');

    InsideIndicator = (BinImage==1);
    OutsideIndicator = (BinImage~=1) ;

    Perimiter = bwperim(BinImage==1);
    PerimiterDilated = double(imdilate(Perimiter, SElement));
    trimap = double(BinImage); trimap(PerimiterDilated==1) =0.5;
    
    InsideBordrer = BinImage - imerode(BinImage,SElement);
%     ;InsideBordrer(imerode(Outside,SElement)==1) = 0;InsideBordrer(Perimiter==1) = 0.5;
    OutsideBorder = imdilate(BinImage,SElement) - BinImage;
%     PerimiterDilated;OutsideBorder(imerode(Inside,SElement)==1) = 0;OutsideBorder(Perimiter==1) = 0.5;
%     imshowpair(InsideBordrer,OutsideBorder,'montage')
    
    % getting the value of the inside and outside pixels and calculating
    % their KDE
    InsideValues = CurrFrameGray(InsideBordrer==1);
    OutsideValues = CurrFrameGray(OutsideBorder==1);
    
    % getting a mapping of 256 bins to convert the values later on
    [~,ProbMapIn,~,~] = kde(InsideValues,256,0,255);
    [~,ProbMapOut,~,~] = kde(OutsideValues,256,0,255);
    

    %using the values of each pixel inside the probability function and
    %adding 1 to get all values to at least 1 ( to get Prob(x))
    x = (CurrFrameGray)+1 ; 
    %Calculate PDF for Foreground using Bayes Rule
    PdfFg = ProbMapIn(x) ./ (ProbMapIn(x) + ProbMapOut(x));
    % the Background PDF
    PdfBg = 1-PdfFg;

%     imshowpair(PdfFg,PdfBg,'montage')
    

    %Calculat the discrete weighted Geodesic distance
    Df = graydist(imgradientxy(PdfFg), InsideBordrer==1); 
    Db = graydist(imgradientxy(PdfBg), OutsideBorder==1);
    
%     imshow(Df,[])
%     imshow(Db,[])   
    r = 2; % r in [0:2]
    Wf = PdfFg(x) ./ (Df(x).^r) ;
    Wb = PdfBg(x) ./(Db(x).^r);
%     imshow(Wf,[])
%     imshow(Wb,[])
    
    alpha = (factor*Wf./(factor*Wf+Wb));
%     imshow(alpha)
    % merging the backgound and the frame

    trimap(trimap == 0.5) = alpha(trimap == 0.5);
%     imshow(trimap);

    % blending
    
    AlphaColors = cat(3, alphaTrimap, alphaTrimap, alphaTrimap);
    FrameFg = zeros(size(CurrFrameRGB));
    FrameFg = zeros(size(CurrFrameRGB));
    for channel=1:3
        FrameFg(:,:,channel) = trimap.* CurrFrameRGB(:,:,channel);
        BGFrame = ((1-trimap).* (BackgroundImage));
        
    
    FrameFg = trimap.* CurrFrameRGB(
    FGFrame = (AlphaColors .* (CurrFrameRGB));
    BGFrame = ((1-AlphaColors).* (BackgroundImage));
%     imshowpair(BGFrame,FGFrame,'blend')
    MattedFrame = FGFrame + BGFrame;
    MattedFrame(MattedFrame>1)=1;MattedFrame(MattedFrame<0)=0;

    
    % Calculating alpha map:
%     AlphaMap = FG_Pf./(FG_Pf+BG_Pf);
%     alpha(isnan(alpha)) = 1-CurrBinaryFrame(isnan(alpha));

%     % Building the combined frame:
%     BG = cat(3,(1-alpha).*BackgroundImage(:,:,1),(1-alpha).*BackgroundImage(:,:,2),(1-alpha).*BackgroundImage(:,:,3)); 
%     FG = cat(3,alpha.*CurrFrameRGB(:,:,1),alpha.*CurrFrameRGB(:,:,2),alpha.*CurrFrameRGB(:,:,3)); 
%     MattedFrame = BG + FG;
    writeVideo(hVideoOut, MattedFrame);
%     imshow(MattedFrame)
end

close(hVideoOut);
close(h);
end







% 
% 
% function OurMatting(InputVidName, InputBinary, OutputVid, NewBackground, factor)
% 
% % Prepare input and output full names for Matting:
% InputFilename = sprintf('../Output/%s',InputVidName);
% InputBinaryFilename = sprintf('../Output/%s',InputBinary);
% NewBackgroundFilename = sprintf('../Input/%s',NewBackground);
% OutputMattedFilename = sprintf('../Output/%s',OutputVid);
% 
% vid=VideoReader(InputFilename); %read input video
% BinVid=VideoReader(InputBinaryFilename);
% MattedVid = VideoWriter(OutputMattedFilename); %create file for output video
% open(MattedVid);
% 
% NumOfFrames = vid.NumberOfFrames;
% 
% toRead = 41;
% F=read(vid,toRead); %get 41st frame of the input video
% BinFrame=read(BinVid,1); 
% F_height=size(F(:,:,1),1); % video frame's height
% F_width=size(F(:,:,1),2); %video frame's width
% B=imread(NewBackgroundFilename); %get background image
% B=imresize(B,[F_height F_width]); %resize background image to fit video frames
% B=im2double(B);
% 
% F=im2double(F);
% %I = imadjust(F,stretchlim(F),[]);
% I=uint32(255*F); %convert to uint32 in order to be able to access high indexes in image I
% 
% imshow(F); title('Please click on numerous points of the foreground object, double click for last point');
% [Yf,Xf]=getpts;
% Yf=uint32(Yf);  Xf=uint32(Xf);
% 
% imshow(F); title('Please click on numerous points of the background, double click for last point');
% [Yb,Xb]=getpts;
% close;
% Yb=uint32(Yb);  Xb=uint32(Xb);
% 
% IntensityF1=zeros(1,size(Xf,1));
% IntensityF2=zeros(1,size(Xf,1));
% IntensityF3=zeros(1,size(Xf,1));
% 
% %create intensity samples vector of foreground for each color channel, from user's
% %samples
% for i=1:size(Xf)
%     IntensityF1(i)=I(Xf(i),Yf(i),1);
%     IntensityF2(i)=I(Xf(i),Yf(i),2);
%     IntensityF3(i)=I(Xf(i),Yf(i),3);
% end
% 
% IntensityB1=zeros(1,size(Xb,1));
% IntensityB2=zeros(1,size(Xb,1));
% IntensityB3=zeros(1,size(Xb,1));
% 
% %create intensity samples vector of background for each color channel, from user's
% %samples
% for i=1:size(Xb)
%     IntensityB1(i)=I(Xb(i),Yb(i),1);
%     IntensityB2(i)=I(Xb(i),Yb(i),2);
%     IntensityB3(i)=I(Xb(i),Yb(i),3);
% end
% 
% %use kernel density estimation to estimate histograms of foreground, for
% %G & B color channels
% 
% [~,densityf2,~,~]= kde(IntensityF2,2^12 ,0,255);
% [~,densityf3,~,~]= kde(IntensityF3,2^12 ,0,255);
% 
% %use kernel density estimation to estimate histograms of background, for
% %G & B color channels
% 
% [~,densityb2,~,~]=kde(IntensityB2,2^12 ,0,255);
% [~,densityb3,~,~]=kde(IntensityB3,2^12 ,0,255);
% 
% %calculate probability of pixel to belong to foreground
% 
% Pf2=densityf2./(densityf2+densityb2);
% Pf3=densityf3./(densityf3+densityb3);
% 
% %calculate probability of pixel to belong to background
% 
% Pb2=densityb2./(densityf2+densityb2);
% Pb3=densityb3./(densityf3+densityb3);
% 
% trimap=zeros(size(I(:,:,1)));
% prob_f_map=zeros(size(I(:,:,1)));
% prob_b_map=zeros(size(I(:,:,1)));
% 
% %F=read(vid,1);
% %F=im2double(F);
% 
% %Main loop:
% 
% w = waitbar(0, 'Matting...');
% % for FrameIdx=1:NumOfFrames
%     
%     F=read(vid, FrameIdx);
%     F=im2double(F);
%     BinFrame=read(BinVid, FrameIdx);
%     BinFrame=im2double(BinFrame);
%    % I = imadjust(F,stretchlim(F),[]);
%     I=uint32(255*F);
%   
% for i=1:size(I(:,:,1),1)
%     for j=1:size(I(:,:,1),2)
%       
%         prob_f_map(i,j)=((Pf2((16*I(i,j,2))+1)).*(Pf3((16*I(i,j,3))+1))); %calc foreground prob map for each pixel
% 
%         prob_b_map(i,j)=(Pb2((16*I(i,j,2))+1)).*(Pb3((16*I(i,j,3))+1)); %calc background prob map for each pixel
%        
%     
%     end
% end
%  
%  %calc gradient of foreground and background prob maps
% [Gxf,Gyf]=imgradientxy(prob_f_map);
% Mag_grad_f=sqrt(Gxf.^2+Gyf.^2);
% [Gxb,Gyb]=imgradientxy(prob_b_map);
% Mag_grad_b=sqrt(Gxb.^2+Gyb.^2);
% 
% %calc geodesic distance for foreground and background
% Tf=graydist(Mag_grad_f,Yf,Xf);
% Tb=graydist(Mag_grad_b,Yb,Xb);
% 
% %create trimap
% for i=1:size(Tf,1)
%     for j=1:size(Tf,2)
%         if(Tf(i,j)-Tb(i,j)<=0)
%             trimap(i,j)=1;
%         else
%             trimap(i,j)=0;
%         end
%     end
% end
% 
% %close holes in foreground object:
% trimap=imdilate(trimap,strel('disk',6));
% trimap=imerode(trimap,strel('disk',6));
% 
% %create narrowband:
% perim=bwperim(trimap);
% Narrow_Band = imdilate(perim,strel('disk',3));
% 
% %calculate alpha map:
% NB_perim=bwperim(Narrow_Band);
% 
% [NB_perim_rows,NB_perim_cols]=find(NB_perim);
% NB_geo_distF=graydist(Mag_grad_f,NB_perim_cols,NB_perim_rows);
% NB_geo_distB=graydist(Mag_grad_b,NB_perim_cols,NB_perim_rows);
% 
% Wf=((NB_geo_distF)).*(prob_f_map);
% Wb=((NB_geo_distB)).*(prob_b_map);
% 
% alpha=factor*Wf./(factor*Wf+Wb); 
% alpha(isnan(alpha))=BinFrame(isnan(alpha));
% 
% %build each result frame:
% res=zeros(size(F));
% res(:,:,1)=alpha.*F(:,:,1)+(1.-alpha).*B(:,:,1); 
% res(:,:,2)=alpha.*F(:,:,2)+(1.-alpha).*B(:,:,2); 
% res(:,:,3)=alpha.*F(:,:,3)+(1.-alpha).*B(:,:,3); 
% 
% %Write result into output video and continue to next frame:
% writeVideo(MattedVid,(res));
% 
% 
% end
% 
% %release files:
% 
% %release(vid);
% close(MattedVi





